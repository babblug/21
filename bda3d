AIM: Demonstrate the use of combiner.
PROGRAM:
Mapper:
import java.io.IOException; 
import org.apache.hadoop.io.IntWritable; 
import org.apache.hadoop.io.LongWritable; 
import org.apache.hadoop.io.Text; 
import org.apache.hadoop.mapreduce.Mapper; 

public class CombinerMapper extends Mapper<LongWritable, Text, Text,
IntWritable>
{

public void map(LongWritable ikey, Text ivalue, Context context) 
throws IOException, InterruptedException 
{ 
String line= ivalue.toString(); 
System.out.println(line); 
String [] tokens = line.split(""); 
int i=0; 
IntWritable val=new IntWritable(1); 

while(i<tokens.length) 
{ 
context.write(new Text(tokens[i]),val); 
i++; 
}
    
}
    
}

REDUCER:

import java.io.IOException; 
import org.apache.hadoop.io.IntWritable; 
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer; 

public class CombinerReducer extends Reducer<Text, IntWritable, Text,
IntWritable>
{ 
public void reduce(Text _key, Iterable<IntWritable> values, Context 
context) throws IOException, InterruptedException
{
// process values 
int sum=0; 

for (IntWritable val : values) 
{
sum=sum+val.get(); 
} 

context.write(_key,new IntWritable(sum));
}
    
}
Driver:
import org.apache.hadoop.conf.Configuration; 
import org.apache.hadoop.fs.Path; 
import org.apache.hadoop.io.IntWritable; 
import org.apache.hadoop.io.Text; 
import org.apache.hadoop.mapreduce.Job; 
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat; 
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class CombinerDriver
{ 
public static void main(String[] args) throws Exception 
{ 
Configuration conf = new Configuration(); 
Job job = Job.getInstance(conf, "combiner");
job.setJarByClass(CombinerDriver.class); 

// TODO: specify a mapper 
job.setMapperClass(CombinerMapper.class); 

// TODO: specify a reducer 
job.setReducerClass(CombinerReducer.class); 
job.setCombinerClass(CombinerReducer.class); 

// TODO: specify output types 
job.setOutputKeyClass(Text.class); 
job.setOutputValueClass(IntWritable.class); 

// TODO: specify input and output DIRECTORIES (not files) 
FileInputFormat.setInputPaths(job, new Path(args[0])); 
FileOutputFormat.setOutputPath(job, new Path(args[1])); 

if (!job.waitForCompletion(true)) 

return; 
}

} 
Output:
    
