AIM:Write Map-Reduce Program for Matrix Multiplication of Two matrices of size MXN
and NXP.

ALGORITHM:

Map(line):
for each element m_ij of M do 
    produce (key,value ) pairs as ((i,k),(M,j)) for k = 1,2,3,..up
    to the number of columns of N
foreach element n_jk of N do
    produce (key,value) pairs as((i,k), (N, j, n_jk)), for i=1,2,3,.. up
    to the number of rows of M
return Set of (key, value) pairs that eac key , (i,k), has a list with values
(M,j,m_ij) and (N, j, n_jk) for all possible values of j

Reduce(k,l):
for each key(i,k) do
    sot values begin with M by j in list_M
    sort values begin with N by j in list_N
    multiply m_ij and n_jk for jth value of each list
    sum up m_ij * n_jk
return (i,k), Î£ (j=1) m_ij * n_jk 

SOURCE CODE:

Mmulmapper.java

import org.apache.hadoop.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import java.io.IOException;

public class Mmulmapper
  extends Mapper<LongWritable, Text, Text, Text> {
    public void map(LongWritable key, Text value, Context context)
            throws IOException, InterruptedException {
        Configuration conf = context.getConfiguration();
        int m = Integer.parseInt(conf.get("m"));
        int p = Integer.parseInt(conf.get("p"));
        String line = value.toString();
        String[] indicesAndValue = line.split(",");
        Text outputKey = new Text();
        Text outputValue = new Text();

        if (indicesAndValue[0].equals("M")) {
            for (int k = 0; k < p; k++) {
                outputKey.set(indicesAndValue[1] + "," + k);
                outputValue.set(indicesAndValue[0] + "," + indicesAndValue[2]
                        + "," + indicesAndValue[3]);
                context.write(outputKey, outputValue);
            }
        } else if(indicesAndValue[0].equals("N")){
            for (int i = 0; i < m; i++) {
                outputKey.set(i + "," + indicesAndValue[2]);
                outputValue.set("N," + indicesAndValue[1] + ","
                        + indicesAndValue[3]);
                context.write(outputKey, outputValue);


            }
        }
    }
}


Mmulreducer.java


import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

import java.io.IOException;
import java.util.HashMap;
import org.apache.hadoop.*;

public class Mmulreducer extends Reducer<Text, Text, Text, Text> {
    public void reduce(Text key, Iterable<Text> values, Context context)
            throws IOException, InterruptedException {
        String[] value;
        HashMap<Integer, Float> hashA = new HashMap<Integer, Float>();
        HashMap<Integer, Float> hashB = new HashMap<Integer, Float>();
        for (Text val : values) {
            value = val.toString().split(",");
            if (value[0].equals("M")) {
                hashA.put(Integer.parseInt(value[1]), Float.parseFloat(value[2]));
            } else {
                hashB.put(Integer.parseInt(value[1]), Float.parseFloat(value[2]));
            }
        }
        int n = Integer.parseInt(context.getConfiguration().get("n"));
        float result = 0.0f;
        float m_ij;
        float n_jk;
        for (int j = 0; j < n; j++) {
            m_ij = hashA.containsKey(j) ? hashA.get(j) : 0.0f;
            n_jk = hashB.containsKey(j) ? hashB.get(j) : 0.0f;
            result += m_ij * n_jk;
        }
        if (result != 0.0f) {
            context.write(null,
                    new Text(key.toString() + "," + Float.toString(result)));
        }
    }
}


Mmuldriver.java


import java.util.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class Mmuldriver {
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
Scanner sc= new Scanner(System.in);
System.out.println("Enter m n p values");
String m=sc.nextLine();
String n=sc.nextLine();

String p=sc.nextLine();

        conf.set("m",m);
        conf.set("n",n);
        conf.set("p",p);
        Job job = new Job(conf, "MatrixMultiply");
        job.setJarByClass(Mmuldriver.class);

        job.setMapperClass(Mmulmapper.class);
        job.setReducerClass(Mmulreducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
 
 
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
 
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        if(!job.waitForCompletion(true))
{
return;}
    }
}


INPUT :

M,0,1,1
M,0,2,2
M,1,1,3
M,1,2,4
N,0,1,5
N,0,2,6
N,1,1,7
N,1,2,8

OUTPUT:

